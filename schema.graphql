type LMC @entity {
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!

  address: Bytes!
  stakingToken: Bytes!
  rewardsTokens: [Bytes!]!
  rewardsAmounts: [BigDecimal!]!
  rewardsDuration: BigInt
}

type Stake @entity {
  id: ID! # transaction hash
  blockNumber: BigInt!
  timestamp: BigInt!

  gasUsed: BigDecimal!
  gasPrice: BigDecimal!

  user: User!
  lmc: LMC!
  token: Bytes!
  amount: BigDecimal!
}

type Withdraw @entity {
  id: ID! # transaction hash
  blockNumber: BigInt!
  timestamp: BigInt!

  gasUsed: BigInt!
  gasPrice: BigInt!

  user: User!
  lmc: LMC!
  token: Bytes!
  amount: BigDecimal!
}

type RewardPaid @entity {
  id: ID! # transaction hash
  blockNumber: BigInt!
  timestamp: BigInt!

  gasUsed: BigDecimal!
  gasPrice: BigDecimal!

  user: User!
  lmc: LMC!
  tokens: [Bytes!]!
  amounts: [BigDecimal!]!
}

type User @entity {
  id: ID! # user's address

  positions: [UserLMCPosition!]! @derivedFrom(field: "user")

  stakes: [Stake!]! @derivedFrom(field: "user")
  withdraws: [Withdraw!]! @derivedFrom(field: "user")
  rewardsPaid: [RewardPaid!]! @derivedFrom(field: "user")
}

type UserLMCPosition @entity {
  id: ID! # `${user.id}-${lmc.id}`
  lastUpdatedInBlock: BigInt!
  lastUpdateTimestamp: BigInt!

  user: User!
  lmc: LMC!

  active: Boolean!
  totalStaked: BigDecimal!
  rewards: [BigDecimal!]!

  gasOnStakes: BigDecimal!
  gasOnWithdraws: BigDecimal!
  gasOnRewardsPaid: BigDecimal!
}