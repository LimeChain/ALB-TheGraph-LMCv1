// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class StakingRewardsFactory extends ethereum.SmartContract {
  static bind(address: Address): StakingRewardsFactory {
    return new StakingRewardsFactory("StakingRewardsFactory", address);
  }

  hasStakingStarted(stakingRewards: Address): boolean {
    let result = super.call(
      "hasStakingStarted",
      "hasStakingStarted(address):(bool)",
      [ethereum.Value.fromAddress(stakingRewards)]
    );

    return result[0].toBoolean();
  }

  try_hasStakingStarted(stakingRewards: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasStakingStarted",
      "hasStakingStarted(address):(bool)",
      [ethereum.Value.fromAddress(stakingRewards)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakingRewardsByStakingToken(param0: Address): Address {
    let result = super.call(
      "stakingRewardsByStakingToken",
      "stakingRewardsByStakingToken(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_stakingRewardsByStakingToken(
    param0: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stakingRewardsByStakingToken",
      "stakingRewardsByStakingToken(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakingRewardsGenesis(): BigInt {
    let result = super.call(
      "stakingRewardsGenesis",
      "stakingRewardsGenesis():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_stakingRewardsGenesis(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakingRewardsGenesis",
      "stakingRewardsGenesis():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakingTokens(param0: BigInt): Address {
    let result = super.call(
      "stakingTokens",
      "stakingTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_stakingTokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stakingTokens",
      "stakingTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _stakingRewardsGenesis(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DeployCall extends ethereum.Call {
  get inputs(): DeployCall__Inputs {
    return new DeployCall__Inputs(this);
  }

  get outputs(): DeployCall__Outputs {
    return new DeployCall__Outputs(this);
  }
}

export class DeployCall__Inputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }

  get _stakingToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _rewardsTokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _rewardsAmounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _rewardsDuration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class DeployCall__Outputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }
}

export class ExtendRewardPeriodCall extends ethereum.Call {
  get inputs(): ExtendRewardPeriodCall__Inputs {
    return new ExtendRewardPeriodCall__Inputs(this);
  }

  get outputs(): ExtendRewardPeriodCall__Outputs {
    return new ExtendRewardPeriodCall__Outputs(this);
  }
}

export class ExtendRewardPeriodCall__Inputs {
  _call: ExtendRewardPeriodCall;

  constructor(call: ExtendRewardPeriodCall) {
    this._call = call;
  }

  get stakingToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get extendRewardToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get extendRewardAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ExtendRewardPeriodCall__Outputs {
  _call: ExtendRewardPeriodCall;

  constructor(call: ExtendRewardPeriodCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class StartStakingCall extends ethereum.Call {
  get inputs(): StartStakingCall__Inputs {
    return new StartStakingCall__Inputs(this);
  }

  get outputs(): StartStakingCall__Outputs {
    return new StartStakingCall__Outputs(this);
  }
}

export class StartStakingCall__Inputs {
  _call: StartStakingCall;

  constructor(call: StartStakingCall) {
    this._call = call;
  }

  get stakingToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class StartStakingCall__Outputs {
  _call: StartStakingCall;

  constructor(call: StartStakingCall) {
    this._call = call;
  }
}

export class StartStakingsCall extends ethereum.Call {
  get inputs(): StartStakingsCall__Inputs {
    return new StartStakingsCall__Inputs(this);
  }

  get outputs(): StartStakingsCall__Outputs {
    return new StartStakingsCall__Outputs(this);
  }
}

export class StartStakingsCall__Inputs {
  _call: StartStakingsCall;

  constructor(call: StartStakingsCall) {
    this._call = call;
  }
}

export class StartStakingsCall__Outputs {
  _call: StartStakingsCall;

  constructor(call: StartStakingsCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
